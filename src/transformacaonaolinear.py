# -*- coding: utf-8 -*-
"""transformacaoNaoLinear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BAh6ErdaVQ5wRDG-uGL-rCcIpn1GdOOb
"""

import numpy as np
import matplotlib.pyplot as plt

# Dados RGB originais e da câmera
rgb_original = np.array([
    [117, 80, 65],
    [199, 144, 128],
    [80, 120, 155],
    [97, 108, 64],
    [124, 128, 174],
    [97, 189, 173],
    [230, 124, 48],
    [42, 91, 168],
    [200, 81, 94],
    [89, 58, 102],
    [166, 187, 63],
    [234, 161, 42],
    [3, 65, 146],
    [71, 147, 71],
    [186, 55, 62],
    [249, 200, 41],
    [183, 78, 140],
    [1, 132, 164],
    [242, 241, 235],
    [202, 202, 200],
    [161, 163, 163],
    [120, 120, 119],
    [83, 84, 84],
    [49, 49, 50]
])

rgb_camera = np.array([
    [52.94246451223196, 31.917849592268198, 23.77287828450619],
    [101.10765934654526, 74.02115693626138, 59.92273701124799],
    [48.201177100053506, 56.311128945960405, 72.34617442482612],
    [43.34611774171919, 47.80501542175138, 30.375754324795494],
    [68.10085607276619, 59.95826645264847, 78.07075976457999],
    [63.88349384697699, 90.10072231139647, 86.2459871589085],
    [100.42021505376344, 52.784946236559136, 25.775340501792115],
    [29.977980364656382, 34.815568022440395, 73.59957924263675],
    [102.52651949541284, 30.167717889908257, 41.236811926605505],
    [43.78222345285892, 22.250865291430152, 39.84812404817943],
    [91.23590842147543, 97.96679609050743, 40.41906547061186],
    [115.16509940891993, 95.31300376141859, 43.953922622246104],
    [54.933161605206074, 55.43939804772234, 82.89208242950109],
    [50.83940105695831, 85.50778038755138, 47.56664709336465],
    [97.52170624716382, 28.187263651489943, 26.629859325366812],
    [137.0207088255733, 112.56428075052119, 30.754551772063934],
    [95.97434497816595, 28.09170305676856, 60.77879366812227],
    [26.089211039866182, 72.954000557569, 87.00013939224979],
    [116.3953177257525, 111.63625418060201, 110.8457525083612],
    [105.9250936329588, 101.2304708400214, 98.73354735152488],
    [85.76163723916532, 80.95157838416266, 77.80778491171749],
    [61.992775919732445, 57.2894983277592, 54.03745819397993],
    [42.110129800615546, 37.372808778268436, 35.144654088050316],
    [22.748205569910997, 20.72624174562159, 20.7015503875969]
])

# Função de transformação linear
def linear_transformation(rgb, A, B):
    return np.dot(rgb, A.T) + B

# Define a matriz A e o vetor B para transformação linear
# Usando uma transformação simples arbitrária como exemplo
A = np.array([[1.2, 0.0, 0.0],
              [0.0, 1.1, 0.0],
              [0.0, 0.0, 1.3]])  # Ajusta os componentes RGB separadamente
B = np.array([10, 20, 30])  # Translação para cada componente RGB

# Aplicando a transformação linear para os dados
corrected_rgb_camera = linear_transformation(rgb_camera, A, B)

# Garantir que os valores de cor estejam no intervalo [0, 255]
corrected_rgb_camera = np.clip(corrected_rgb_camera, 0, 255)

# Exemplo de cor a ser visualizada
rgb_target = [63.88349384697699, 90.10072231139647, 86.2459871589085]# RGB de um ponto
corrected_rgb_target = linear_transformation(np.array([rgb_target]), A, B)

rgb_target = np.clip(rgb_target, 0, 255).astype(int)

plt.imshow([[rgb_target]])  # Forma correta para um único pixel
plt.axis('off')  # Desliga os eixos
plt.show()

# Garantir que a cor corrigida esteja no intervalo válido
corrected_rgb_target = np.clip(corrected_rgb_target, 0, 255).astype(int)

print("RGB corrigido:", corrected_rgb_target)

plt.imshow([[[corrected_rgb_target[0][0], corrected_rgb_target[0][1], corrected_rgb_target[0][2]]]])  # Forma correta para um único pixel
plt.axis('off')  # Desliga os eixos
plt.show()